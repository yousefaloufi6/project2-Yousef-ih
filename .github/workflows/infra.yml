name: Infrastructure - Terraform

on:
  pull_request:
    paths:
      - 'terraform/**'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/infra.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options: [ plan, apply, destroy ]
        default: 'plan'

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

# Note: Using Azure CLI authentication instead of Service Principal
# Ensure you're logged in with: az login

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
    outputs:
      plan_exit_code: ${{ steps.plan.outputs.exit_code }}
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Clean Terraform cache
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl
          rm -f terraform.tfstate*

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -detailed-exitcode 2>&1 | tee plan.txt
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          set -e
          echo "exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "::notice::No changes. Infrastructure is up-to-date."
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "::notice::Changes detected."
          else
            echo "::error::Terraform plan failed."
            exit 1
          fi

      - name: Upload plan artifact
        if: steps.plan.outputs.exit_code == '2'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/main/tfplan.bin
          retention-days: 5

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/main/plan.txt', 'utf8');
            const output = `#### Terraform Plan ðŸ“‹
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.terraform-plan.outputs.plan_exit_code == '2') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    environment:
      name: production
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false

      - name: Auto-import existing resources if not in state
        continue-on-error: true
        run: |
          echo "=== Starting comprehensive resource import ==="
          
          SUB_ID=$(az account show --query id -o tsv)
          RG="aloufiyousef-rg"
          
          # Function to import if not in state
          import_if_missing() {
            local tf_resource=$1
            local azure_id=$2
            local resource_name=$3
            
            if ! terraform state show "$tf_resource" &>/dev/null; then
              echo "Importing $resource_name..."
              terraform import "$tf_resource" "$azure_id" || true
            else
              echo "$resource_name already in state - skipping"
            fi
          }
          
          # 1. Resource Group
          import_if_missing \
            'module.resource_group.azurerm_resource_group.main' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG" \
            "Resource Group"
          
          # 2. Virtual Network
          import_if_missing \
            'module.network.azurerm_virtual_network.main' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod" \
            "Virtual Network"
          
          # 3. Network Security Groups
          import_if_missing \
            'module.network.azurerm_network_security_group.agw' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/networkSecurityGroups/nsg-agw-prod" \
            "AGW NSG"
          
          import_if_missing \
            'module.network.azurerm_network_security_group.aca' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/networkSecurityGroups/nsg-aca-prod" \
            "ACA NSG"
          
          # 4. Public IP
          import_if_missing \
            'module.app_gateway.azurerm_public_ip.agw' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/publicIPAddresses/pip-agw-aloufiyousef-burgerbuilder" \
            "Application Gateway Public IP"
          
          # 5. Log Analytics Workspace
          import_if_missing \
            'module.log_analytics.azurerm_log_analytics_workspace.main' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.OperationalInsights/workspaces/law-aloufiyousef-burgerbuilder" \
            "Log Analytics Workspace"
          
          # 6. SQL Server
          import_if_missing \
            'module.sql.azurerm_mssql_server.main' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Sql/servers/sql-aloufiyousef-burgerbuilder" \
            "SQL Server"
          
          # 7. Subnets
          import_if_missing \
            'module.network.azurerm_subnet.agw' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-agw" \
            "Application Gateway Subnet"
          
          import_if_missing \
            'module.network.azurerm_subnet.aca' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-aca" \
            "Container Apps Environment Subnet"
          
          import_if_missing \
            'module.network.azurerm_subnet.aca_ca' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-aca-ca" \
            "Container Apps Subnet"
          
          import_if_missing \
            'module.network.azurerm_subnet.pe' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-pe" \
            "Private Endpoint Subnet"
          
          # 8. SQL Database
          import_if_missing \
            'module.sql.azurerm_mssql_database.main' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Sql/servers/sql-aloufiyousef-burgerbuilder/databases/burgerbuilderaloufi" \
            "SQL Database"
          
          # 9. Private DNS Zones
          import_if_missing \
            'module.dns.azurerm_private_dns_zone.sql' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net" \
            "SQL Private DNS Zone"
          
          import_if_missing \
            'module.dns.azurerm_private_dns_zone.container_apps' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/privateDnsZones/whitedesert-4d6c9740.westus2.azurecontainerapps.io" \
            "Container Apps Private DNS Zone"
          
          # 10. Private DNS Zone Virtual Network Links
          import_if_missing \
            'module.dns.azurerm_private_dns_zone_virtual_network_link.sql' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net/virtualNetworkLinks/sql-dns-link" \
            "SQL DNS Zone VNet Link"
          
          import_if_missing \
            'module.dns.azurerm_private_dns_zone_virtual_network_link.container_apps' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/privateDnsZones/whitedesert-4d6c9740.westus2.azurecontainerapps.io/virtualNetworkLinks/container-apps-dns-link" \
            "Container Apps DNS Zone VNet Link"
          
          # 11. Application Gateway
          import_if_missing \
            'module.app_gateway.azurerm_application_gateway.main' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/applicationGateways/agw-aloufiyousef-burgerbuilder" \
            "Application Gateway"
          
          # 12. Subnet NSG Associations
          import_if_missing \
            'module.network.azurerm_subnet_network_security_group_association.agw' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-agw" \
            "AGW Subnet NSG Association"
          
          import_if_missing \
            'module.network.azurerm_subnet_network_security_group_association.aca' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-aca" \
            "ACA Subnet NSG Association"
          
          import_if_missing \
            'module.network.azurerm_subnet_network_security_group_association.aca_ca' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/virtualNetworks/vnet-prod/subnets/subnet-aca-ca" \
            "ACA CA Subnet NSG Association"
          
          # 13. Private Endpoint
          import_if_missing \
            'module.sql.azurerm_private_endpoint.sql' \
            "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.Network/privateEndpoints/pe-sql-aloufiyousef-burgerbuilder" \
            "SQL Private Endpoint"
          
          # 14. Container Apps Environment
          if az containerapp env show --name aloufiyousef-aca-env-prod --resource-group $RG &>/dev/null; then
            import_if_missing \
              'module.container_apps_env.azurerm_container_app_environment.main' \
              "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.App/managedEnvironments/aloufiyousef-aca-env-prod" \
              "Container Apps Environment"
            
            # 15. Container Apps Environment Diagnostic Setting
            import_if_missing \
              'module.container_apps_env.azurerm_monitor_diagnostic_setting.aca_env' \
              "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.App/managedEnvironments/aloufiyousef-aca-env-prod|diag-aloufiyousef-aca-env-prod" \
              "Container Apps Environment Diagnostics"
          fi
          
          # 16. Container Apps
          if az containerapp show --name ca-frontend-aloufi --resource-group $RG &>/dev/null; then
            import_if_missing \
              'module.frontend_container_app.azurerm_container_app.main' \
              "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.App/containerApps/ca-frontend-aloufi" \
              "Frontend Container App"
          fi
          
          if az containerapp show --name ca-backend-aloufi --resource-group $RG &>/dev/null; then
            import_if_missing \
              'module.backend_container_app.azurerm_container_app.main' \
              "/subscriptions/$SUB_ID/resourceGroups/$RG/providers/Microsoft.App/containerApps/ca-backend-aloufi" \
              "Backend Container App"
          fi
          
          echo "=== Import check complete ==="

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output -json > outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/main/outputs.json
          retention-days: 30

  terraform-destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    environment:
      name: production
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false

      - name: Pre-destroy - Delete Container Apps first
        continue-on-error: true
        run: |
          echo "=== Deleting Container Apps and Environment BEFORE Terraform destroy ==="
          echo "This prevents subnet deletion errors caused by leftover AKS resources"
          
          # Delete Container Apps first
          echo "Deleting frontend container app..."
          az containerapp delete --name ca-frontend-aloufi --resource-group aloufiyousef-rg --yes || true
          
          echo "Deleting backend container app..."
          az containerapp delete --name ca-backend-aloufi --resource-group aloufiyousef-rg --yes || true
          
          # Wait for apps to delete
          echo "Waiting 30 seconds for container apps to delete..."
          sleep 30
          
          # Delete ALL Container Apps Environments (this will clean up AKS resources)
          echo "Deleting ALL Container Apps Environments..."
          for env_name in $(az containerapp env list --resource-group aloufiyousef-rg --query "[].name" -o tsv); do
            echo "Deleting environment: $env_name"
            az containerapp env delete --name "$env_name" --resource-group aloufiyousef-rg --yes || true
          done
          
          # Wait for environments to delete (this is critical!)
          echo "Waiting 120 seconds for environments and AKS resources to fully delete..."
          sleep 120
          
          echo "=== Pre-destroy cleanup complete ==="

      - name: Clean up any corrupted state
        continue-on-error: true
        run: |
          # Remove resources from state since we deleted them manually
          terraform state rm 'module.container_apps_env.azurerm_container_app_environment.main' || true
          terraform state rm 'module.container_app_frontend.azurerm_container_app.main' || true
          terraform state rm 'module.container_app_backend.azurerm_container_app.main' || true

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Manual cleanup of stuck resources
        continue-on-error: true
        run: |
          echo "Cleaning up any remaining Container Apps resources..."
          az containerapp delete --name ca-frontend-aloufi --resource-group aloufiyousef-rg --yes --no-wait || true
          az containerapp delete --name ca-backend-aloufi --resource-group aloufiyousef-rg --yes --no-wait || true
          az containerapp env delete --name aloufiyousef-aca-env-prod --resource-group aloufiyousef-rg --yes --no-wait || true
          echo "Cleanup commands issued. Resources will be deleted in the background."
